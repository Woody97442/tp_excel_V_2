generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id                   String           @id @default(cuid())
  name                 String?           
  username             String?          @unique
  email                String?          @unique
  emailVerified        DateTime? 
  password             String? 
  role                 UserRole         @default(USER)
       
  Account              Account? 
  
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                       String           @id @default(cuid())
  userId                   String     @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@unique([provider, providerAccountId])
  @@index([userId])
}

model VerificationToken {
  id         String           @id @default(cuid())
  email      String
  token      String @unique
  expires    DateTime
 
  @@unique([email, token])
}

model PasswordResetToken {
  id         String           @id @default(cuid())
  email      String
  token      String @unique
  expires    DateTime
 
  @@unique([email, token])
}

model TwoFactorToken {
  id         String           @id @default(cuid())
  email      String
  token      String @unique
  expires    DateTime
 
  @@unique([email, token])
}

model TwoFactorConfirmation{
  id         String           @id @default(cuid())

  userId     String  
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}


enum Months {
  Janvier
  Fevrier
  Mars
  Avril
  Mai
  Juin
  Juillet
  Aout
  Septembre
  Octobre
  Novembre
  Decembre
}

enum Gender {
  Homme
  Femme
}

model Product {
  id                Int     @id @default(autoincrement())
  name              String  @unique
  numberPurchases   String?
  numberSales       String?
  pahtnet           String
  

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Pupil {
  id                Int     @id @default(autoincrement())
  name              String  
  age               String
  gender            Gender
  grade             String?
  isPaymentPhoto    Boolean
  monthPayment      Months?
  

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Employee {
  id                  Int     @id @default(autoincrement())
  name                String
  firstName           String
  gender              Gender
  age                 String
  dateOfIntegration   DateTime
  qualification       String
  site                String
  grossSalary         String
  hoursOfAbsence      String

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}